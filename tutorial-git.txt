Git tutorial

git instalisan
napravim folder sa imenom projekta
odem u folder

kreiram repositorijum

git init u komand promptu ili 
sourcetree file-new-create

isto je bez obzira da li vec postoji nesto u projektu ( neki fajlovi ) ili je prazan folder

nastavljam da radim na projektu u visual studio code ( sa git se moze raditi iz komandne linije ili source tree ili iz vs code direktno )

projekat ili samo neki njegovi delovi se cuvaju kad se neki deo projekta zavrsi ( neka logicna celina a ne svaki cas )

prvi put cemo sacuvati sve ( inicijalno ) , a posle mogu sve promene ili samo neki fajlovi kako hocemo

cuvanje se radi uvek ovako :
1 faza su promenjeni fajlovi koje vidimo sa git status ( crvene su boje ) u kom promptu ili kao unstaged file u sourcetree ili kao changes u vsc

2 faza je stage ( priprema za cuvanje commit ) u vsc i sourcetree ima dugmad , a u kom promptu git add imefjla ili git add . za sve fajlove
  moze se i ponistiti sa git rm --cashed imefajla ( git rm --cached . -r  za sve) ili u vsc i sourcetree lako na dugme
  u stage statusu fajlovi su zeleni u komand  promptu ili staged file u sourcetree ili staged changes u vsc

3 faza je commit fajlova ( pravi se tacka u vremenu koja je neka logicka faza projekta , na koju se uvek moze vratiti - prva je inicijalni commit)

  najnoviji ( sada prvi ) commit se uvek zove master .  napravio sam ga iz komand prompta sa : git commit -m "poruka tekst gde se opisuje taj commit"
  svi commiti se mogu izlistati sa git log ili git log --oneline

  drugi commit sam napravio iz sourcetree ( upise se poruka tekst i dugme commit ) sada je drugi master

  treci commit sam napravio iz vs code ( upise se poruka i dugme commit ) sada je treci master 

rad sa commitima :

checkout commit - da se vidi projekat u toj tacki vremena ( read-only ) nemoze se menjati sluzi samo za pregled
git checkout sifracommita , vratis se na zadnji sa git checkout master ( u npr vs code imas projekat u trenutku commita )
revert commit - ponistavaju se promene koje je taj commit napravio ( ustvari napravi jos jedan najnoviji commit sa ponistenim promenama datog commita)
git revert sifracommita , napravice ustvari jos jedan commit gde ce biti ponistene promene koje je napravio revertovan commit 
reset commit - skroz ponistava sve commite posle datog ( cuva promene u fajlovima kao unstaged pa se mogu ponovo commitovati), ili ako dodamo 
-hard sve vraca na dati commit sa fajlovima u datom trenutku 
git reset sifracomita ili git reset sifracommita -hard ( gore opisana razlika )

ovo sve moze i iz sourcetree ( checkout , reverse i reset )ili iz vs code (ne sve izgleda samo sa masterom radi moze undo zadnjeg commita)

branch

tacka grananja - master ostaje glavni a iz njega se pravi nova staza ili vise staza koje postaju nezavisne od mastera

git branch nazivbrancha ili u sourcetree new branch
sa git branch -a  listamo sve staze , pa se sa git checkout pozicioniramo gde hocemo da radimo , to se prati i u editoru
moze se nastaviti raditi u masteru kao i u svim ili samo nekim branchevima , redovno commiti i sve normalno
u branchu obicno isprobavamo nesto , a da se nedira master pa kad zavrsimo i valja mergujemo uradjeno nazad u master
iz vs coda se moze birati u kojoj grani se radi sa checkout ( master ili neki branch )

merge 

tacka ponovnog spajanja - branchove spajamo u master nazad
ode se u master sa git checkout master ili u sourcetree se namestimo na master
pa ond git merge nazivbrancha , pa se taj branch merguje nazad u master , ako dodje do konflikta rucno resis u vs codu
peske sredis kakav ce biti konacan fajl u masteru ( ako ima konflikta ), ide lako u vs code

GitHub

servis koji sluzi za rad sa remote repositorijumima bilo da radimo sami ili sradjujemo u timu.

1   kad radimo sami ( sluzi da cuvamo projekte remote , kao backup i da na projektu radimo sa vise uredjaja )
2   kad smo u timu ( sluzi da radimo na istoj verziji projekta )

prvo sam otvorio github nalog 

kad radim sam :

mogu da postojeci lokalni projekat kloniram na github ili da na githubu napravim repo-projekat novi , da ga kloniram na lokalnu masinu i radim 
na tom novom projektu 

napravi se na githubu novi repo za ovaj projekt , onda kopiram url tog projekta-repoa pa na lokalnom kucam git push gde(url remote) sta (master)
nemora master moze bilo koji branch , ali ja cu master pa je naredba kao dole ( mora biti prethodno odradjen commit da nema neuskladjenih fajlova)
git push https://github.com/zeljkobalenovic/html-and-css-crash-course.git master  trazice username i password i kad se ukuca sve je na remotu
vide se svi commiti i branchevi kao i na local - sad su lokal i remote isti 
redovno radimo na projektu , stage , commit i onda opet push kad hocemo i opet su local i remote u paru.

da nebi stalno kucali dugacki url damo alias :  git remote add origin https://github.com/zeljkobalenovic/html-and-css-crash-course.git
sada uvek umesto dugackog url kucamo origin






